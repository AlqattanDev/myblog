---
import BlogPost from '../layouts/BlogPost.astro';
import MarkdownContent from '../components/MarkdownContent.astro';
import { ContentManager, type BlogPost as BlogPostType } from '../utils/content-manager.js';
import { marked } from 'marked';

export async function getStaticPaths() {
  // Use ContentManager to get all posts (local + GitHub)
  const contentManager = new ContentManager();
  const allPosts = await contentManager.getAllPosts();

  return allPosts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = BlogPostType;

const post = Astro.props;

// Check if this is a GitHub post (it will have body property and no actual render function)
const isGitHubPost = 'body' in post;
let Content: any;
let renderedContent: string = '';

if (isGitHubPost) {
  // For GitHub posts, render the markdown body directly
  renderedContent = await marked(post.body);
  Content = MarkdownContent;
} else {
  // For local posts, use the normal render function
  const rendered = await post.render();
  Content = rendered.Content;
}
---

<BlogPost post={post}>
  {isGitHubPost ? (
    <Content html={renderedContent} />
  ) : (
    <Content />
  )}
</BlogPost>